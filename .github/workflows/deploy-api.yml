name: Deploy API

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: api-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # --- Checkout & build (runner only) ---
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Build (non-blocking)
        run: npm run build || true

      # --- Sanity: ensure required secrets/vars exist (no values printed) ---
      - name: Debug inputs (no secrets printed)
        run: |
          test -n "${{ secrets.VPS_HOST }}" && echo "VPS_HOST=OK" || echo "VPS_HOST=MISSING"
          test -n "${{ secrets.VPS_USER }}" && echo "VPS_USER=OK" || echo "VPS_USER=MISSING"
          test -n "${{ secrets.VPS_PATH }}" && echo "VPS_PATH=OK" || echo "VPS_PATH=MISSING"
          if [ -n "${{ secrets.VPS_SSH_KEY }}" ]; then echo "VPS_SSH_KEY=OK"; else echo "VPS_SSH_KEY=MISSING"; fi
          test -n "${{ secrets.PM2_NAME }}" && echo "PM2_NAME=OK" || echo "PM2_NAME=MISSING"
          test -n "${{ secrets.X_API_KEY }}" && echo "X_API_KEY=OK" || echo "X_API_KEY=MISSING"
          if [ -n "${{ vars.API_HOST }}" ] || [ -n "${{ secrets.API_HOST }}" ] || [ -n "${{ secrets.API_BASE_URL }}" ]; then
            echo "API_BASE/HOST present"
          else
            echo "API_BASE/HOST MISSING"; exit 1
          fi
          if [ -n "${{ secrets.SUPABASE_DB_URL }}" ]; then echo "SUPABASE_DB_URL=OK"; else echo "SUPABASE_DB_URL=NOT SET (routing gate will auto-skip)"; fi

      # --- Resolve public API base with safe fallbacks (prefers vars for visible host) ---
      - name: Resolve API base URL (vars → secrets → base_url)
        id: resolve-url
        run: |
          if [ -n "${{ vars.API_HOST }}" ]; then
            echo "URL_BASE=https://${{ vars.API_HOST }}" >> "$GITHUB_ENV"
            echo "Resolved via vars.API_HOST"
          elif [ -n "${{ secrets.API_HOST }}" ]; then
            echo "URL_BASE=https://${{ secrets.API_HOST }}" >> "$GITHUB_ENV"
            echo "Resolved via secrets.API_HOST (masked)"
          elif [ -n "${{ secrets.API_BASE_URL }}" ]; then
            echo "URL_BASE=${{ secrets.API_BASE_URL }}" >> "$GITHUB_ENV"
            echo "Resolved via secrets.API_BASE_URL (masked)"
          else
            echo "No API host/base configured"; exit 1
          fi

      # --- Ship code to VPS ---
      - name: Upload to VPS
        uses: easingthemes/ssh-deploy@v5.1.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.VPS_HOST }}
          REMOTE_USER: ${{ secrets.VPS_USER }}
          TARGET: ${{ secrets.VPS_PATH }}
          ARGS: "-az --delete"
          EXCLUDE: ".git,.github,node_modules,*.log"

      - name: Install prod deps & restart pm2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            cd "${{ secrets.VPS_PATH }}"
            NODE_ENV=production npm ci --omit=dev
            # Restart (or start) the API; keep name consistent with your PM2 process
            sudo pm2 restart "${{ secrets.PM2_NAME }}" --update-env || \
            sudo pm2 start "node src/server.js" --name "${{ secrets.PM2_NAME }}"
            sudo pm2 save || true

      - name: Warm-up wait
        run: sleep 2

      # --- Smokes: assert REAL PDFs (status+headers+magic) ---
      - name: Smoke A6 (strict PDF checks, retry x3)
        run: |
          set -euo pipefail
          URL="$URL_BASE/api/labels/render-a6?save=0"
          echo "→ POST $URL"
          for i in 1 2 3; do
            curl -sS -X POST "$URL" \
              -H "X-Api-Key: ${{ secrets.X_API_KEY }}" \
              -H "Content-Type: application/json" \
              --data-binary '{"variant":"a6_trk24_nosig_v1","orderId":"CI-A6","recipient":{"lines":["A","B","C","SW1A 1AA"]}}' \
              -D a6.headers -o a6.bin -w "\nHTTP=%{http_code}\n" && break || sleep 1
          done
          grep -qE '^HTTP/2 200|^HTTP/1\.1 200' a6.headers || (echo "A6: non-200"; sed -n '1,120p' a6.headers; exit 1)
          grep -qi '^content-type: *application/pdf' a6.headers || (echo "A6: wrong Content-Type"; sed -n '1,120p' a6.headers; exit 1)
          grep -qi '^content-disposition: *attachment; *filename="RM-ORD-' a6.headers || (echo "A6: wrong Content-Disposition"; sed -n '1,120p' a6.headers; exit 1)
          head -c 5 a6.bin | grep -q "%PDF-" || (echo "A6: not real PDF"; head -c 64 a6.bin | hexdump -C; exit 1)
          echo "A6 OK"

      - name: Smoke A4 4-up (strict PDF checks, retry x3)
        run: |
          set -euo pipefail
          URL="$URL_BASE/api/labels/render-a4-4up?count=1&save=0"
          echo "→ POST $URL"
          for i in 1 2 3; do
            curl -sS -X POST "$URL" \
              -H "X-Api-Key: ${{ secrets.X_API_KEY }}" \
              -H "Content-Type: application/json" \
              --data-binary '{"variant":"a6_trk24_nosig_v1","orderId":"CI-A4","recipient":{"lines":["A","B","C","SW1A 1AA"]}}' \
              -D a4.headers -o a4.bin -w "\nHTTP=%{http_code}\n" && break || sleep 1
          done
          grep -qE '^HTTP/2 200|^HTTP/1\.1 200' a4.headers || (echo "A4: non-200"; sed -n '1,120p' a4.headers; exit 1)
          grep -qi '^content-type: *application/pdf' a4.headers || (echo "A4: wrong Content-Type"; sed -n '1,120p' a4.headers; exit 1)
          grep -qi '^content-disposition: *attachment; *filename="RM-ORD-' a4.headers || (echo "A4: wrong Content-Disposition"; sed -n '1,120p' a4.headers; exit 1)
          head -c 5 a4.bin | grep -q "%PDF-" || (echo "A4: not real PDF"; head -c 64 a4.bin | hexdump -C; exit 1)
          echo "A4 OK"

      # --- Routing integrity gate (auto-skip if DB secret not set) ---
      - name: Routing integrity (no null tiles)
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.SUPABASE_DB_URL }}" ]; then
            echo "Skipping routing integrity: SUPABASE_DB_URL not set."
            exit 0
          fi
          echo "Checking routing integrity..."
          sudo apt-get update -y >/dev/null && sudo apt-get install -y postgresql-client >/dev/null
          COUNT=$(psql "${{ secrets.SUPABASE_DB_URL }}" -Atc \
            "select count(*) from postcode_routing_codes where tile_left is null or tile_right is null;")
          echo "Null tile rows: $COUNT"
          [ "$COUNT" -eq 0 ] || (echo "Routing holes exist. Import mappings before deploy."; exit 1)

      # --- Preserve artifacts on failure for debugging ---
      - name: Upload smoke artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: |
            a6.headers
            a6.bin
            a4.headers
            a4.bin
          if-no-files-found: ignore

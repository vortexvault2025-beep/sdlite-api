name: Deploy API

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: api-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Setup Node.js (runner)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Build (non-blocking)
        run: npm run build || true

      - name: Debug inputs (no secrets printed)
        run: |
          test -n "${{ secrets.VPS_HOST }}" && echo "VPS_HOST=OK" || (echo "VPS_HOST=MISSING"; exit 1)
          test -n "${{ secrets.VPS_USER }}" && echo "VPS_USER=OK" || (echo "VPS_USER=MISSING"; exit 1)
          test -n "${{ secrets.VPS_PATH }}" && echo "VPS_PATH=OK" || (echo "VPS_PATH=MISSING"; exit 1)
          test -n "${{ secrets.VPS_SSH_KEY }}" && echo "VPS_SSH_KEY=OK" || (echo "VPS_SSH_KEY=MISSING"; exit 1)
          test -n "${{ secrets.PM2_NAME }}" && echo "PM2_NAME=OK" || (echo "PM2_NAME=MISSING"; exit 1)
          test -n "${{ secrets.X_API_KEY }}" && echo "X_API_KEY=OK" || echo "X_API_KEY=MISSING"
          if [ -n "${{ vars.API_HOST }}" ] || [ -n "${{ secrets.API_HOST }}" ] || [ -n "${{ secrets.API_BASE_URL }}" ]; then
            echo "API_BASE/HOST present"
          else
            echo "API_BASE/HOST MISSING"; exit 1
          fi
          if [ -n "${{ secrets.SUPABASE_DB_URL }}" ]; then echo "SUPABASE_DB_URL=SET"; else echo "SUPABASE_DB_URL=NOT SET (routing gate will auto-skip)"; fi

      - name: Resolve API base URL (vars → secrets → base_url)
        run: |
          if [ -n "${{ vars.API_HOST }}" ]; then
            echo "URL_BASE=https://${{ vars.API_HOST }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.API_HOST }}" ]; then
            echo "URL_BASE=https://${{ secrets.API_HOST }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.API_BASE_URL }}" ]; then
            echo "URL_BASE=${{ secrets.API_BASE_URL }}" >> "$GITHUB_ENV"
          else
            echo "No API host/base configured"; exit 1
          fi

      - name: Prepare release dir on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key:      ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          envs: GITHUB_SHA
          script: |
            set -euo pipefail
            BASE="${{ secrets.VPS_PATH }}"
            RELS="${BASE}/releases"
            REL="${RELS}/${GITHUB_SHA}"
            mkdir -p "$RELS" "$REL"
            ( cd "$REL" && touch .ci_w && rm .ci_w ) || {
              echo "ERR: cannot write to $REL; fix ownership: sudo chown -R ${USER}:${USER} ${BASE}"
              exit 1
            }

      - name: Upload to VPS (per-release)
        uses: easingthemes/ssh-deploy@v5.1.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
          REMOTE_HOST:     ${{ secrets.VPS_HOST }}
          REMOTE_USER:     ${{ secrets.VPS_USER }}
          TARGET:          ${{ secrets.VPS_PATH }}/releases/${{ github.sha }}/
          ARGS: "-az --delete"
          EXCLUDE: ".git,.github,node_modules,*.log"

      - name: Install prod deps, link .env, switch symlink, restart pm2 (no sudo), readiness + auto-rollback
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key:      ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          envs: GITHUB_SHA
          script: |
            set -euo pipefail
            BASE="${{ secrets.VPS_PATH }}"
            RELS="${BASE}/releases"
            REL="${RELS}/${GITHUB_SHA}"
            CUR="${BASE}/current"
            PREV="$(readlink -f "$CUR" || true)"

            cd "$REL"
            NODE_ENV=production npm ci --omit=dev --no-audit --no-fund

            # preflight: ensure dotenv is resolvable (CI omits dev deps)
            node -e "try{require.resolve('dotenv');console.log('dotenv OK')}catch(e){process.exit(66)}" || { echo 'dotenv missing'; npm i dotenv@^16 --no-audit --no-fund; }

            # link base .env
            [ -f "${BASE}/.env" ] && ln -sfn "${BASE}/.env" "${REL}/.env" || true

            # flip symlink
            ln -sfn "$REL" "$CUR"

            # restart pm2 UNDER THIS USER (no sudo)
            cd "$CUR"
            pm2 restart "${{ secrets.PM2_NAME }}" --update-env || pm2 start "node src/server.js" --name "${{ secrets.PM2_NAME }}"
            pm2 save || true

            # determine PORT
            PORT="${PORT:-}"
            if [ -z "$PORT" ] && [ -f "${BASE}/.env" ]; then PORT="$(grep -E '^PORT=' "${BASE}/.env" | tail -1 | cut -d= -f2 | tr -d '\r' || true)"; fi
            PORT="${PORT:-3000}"

            # readiness (accept 200/401)
            echo "Polling http://127.0.0.1:${PORT}/healthz (accept 200 or 401) ..."
            ready=0
            for i in $(seq 1 90); do
              code="$(curl -s -o /dev/null -w '%{http_code}' "http://127.0.0.1:${PORT}/healthz" || true)"
              code=${code:-000}
              echo "healthz try #$i: HTTP $code"
              if [ "$code" = "200" ] || [ "$code" = "401" ]; then ready=1; break; fi
              sleep 1
            done

            if [ "$ready" -ne 1 ]; then
              echo "❌ Not ready; diagnostics + rollback"
              ss -lntp || true
              pm2 describe "${{ secrets.PM2_NAME }}" || true
              pm2 logs "${{ secrets.PM2_NAME }}" --lines 200 --raw || true
              if [ -n "$PREV" ] && [ -d "$PREV" ] && [ "$PREV" != "$REL" ]; then
                echo "↩️  Rolling back to $PREV"
                ln -sfn "$PREV" "$CUR"
                cd "$CUR"
                pm2 restart "${{ secrets.PM2_NAME }}" --update-env || true
                pm2 save || true
              else
                echo "No previous release to roll back to."
              fi
              exit 1
            fi

            # keep last 5 releases
            ls -1dt "${RELS}/"* 2>/dev/null | tail -n +6 | xargs -r rm -rf

      - name: Smoke A6 (strict PDF checks, retry x5)
        run: |
          set -euo pipefail
          URL="$URL_BASE/api/labels/render-a6?save=0"
          BODY='{"variant":"a6_trk24_nosig_v1","orderId":"CI-A6","recipient":{"lines":["A","B","C","SW1A 1AA"]}}'
          for i in 1 2 3 4 5; do
            curl -sS -X POST "$URL" -H "X-Api-Key: ${{ secrets.X_API_KEY }}" -H "Content-Type: application/json" --data-binary "$BODY" -D a6.headers -o a6.bin -w "\nHTTP=%{http_code}\n" && break || sleep 2
          done
          grep -qE '^HTTP/2 200|^HTTP/1\.1 200' a6.headers || { sed -n '1,120p' a6.headers; exit 1; }
          grep -qi '^content-type: *application/pdf' a6.headers || { sed -n '1,120p' a6.headers; exit 1; }
          grep -qi '^content-disposition: *attachment; *filename="RM-ORD-' a6.headers || { sed -n '1,120p' a6.headers; exit 1; }
          head -c 5 a6.bin | grep -q "%PDF-" || { head -c 64 a6.bin | hexdump -C; exit 1; }

      - name: Smoke A4 4-up (strict PDF checks, retry x5)
        run: |
          set -euo pipefail
          URL="$URL_BASE/api/labels/render-a4-4up?count=1&save=0"
          BODY='{"variant":"a6_trk24_nosig_v1","orderId":"CI-A4","recipient":{"lines":["A","B","C","SW1A 1AA"]}}'
          for i in 1 2 3 4 5; do
            curl -sS -X POST "$URL" -H "X-Api-Key: ${{ secrets.X_API_KEY }}" -H "Content-Type: application/json" --data-binary "$BODY" -D a4.headers -o a4.bin -w "\nHTTP=%{http_code}\n" && break || sleep 2
          done
          grep -qE '^HTTP/2 200|^HTTP/1\.1 200' a4.headers || { sed -n '1,120p' a4.headers; exit 1; }
          grep -qi '^content-type: *application/pdf' a4.headers || { sed -n '1,120p' a4.headers; exit 1; }
          grep -qi '^content-disposition: *attachment; *filename="RM-ORD-' a4.headers || { sed -n '1,120p' a4.headers; exit 1; }
          head -c 5 a4.bin | grep -q "%PDF-" || { head -c 64 a4.bin | hexdump -C; exit 1; }

      - name: Validate & normalize SUPABASE_DB_URL (no leaks)
        id: dbnorm
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.SUPABASE_DB_URL }}" ]; then echo "no_db=1" >> "$GITHUB_OUTPUT"; exit 0; fi
          RAW="${{ secrets.SUPABASE_DB_URL }}"
          RAW=$(echo "$RAW" | tr -d '\r' | sed -E 's/^["'\'' ]+//; s/["'\'' ]+$//')
          CLEAN=$(echo "$RAW" | awk -F'\\?' '{print $1}')
          echo "db_url_clean=$CLEAN" >> "$GITHUB_OUTPUT"
          echo "DB_URL_CLEAN=$CLEAN"  >> "$GITHUB_ENV"

      - name: Audit verify (save=1 + DB row exists)
        if: steps.dbnorm.outputs.no_db != '1'
        run: |
          set -euo pipefail
          ORDER="CI-AUDIT-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          URL="$URL_BASE/api/labels/render-a6?save=1"
          curl -sS -X POST "$URL" -H "X-Api-Key: ${{ secrets.X_API_KEY }}" -H "Content-Type: application/json" \
            --data-binary "{\"variant\":\"a6_trk24_nosig_v1\",\"orderId\":\"$ORDER\",\"recipient\":{\"lines\":[\"A\",\"B\",\"C\",\"SW1A 1AA\"]}}" \
            -D audit.headers -o audit.bin -w "\nHTTP=%{http_code}\n"
          head -c 5 audit.bin | grep -q "%PDF-" || { echo "Audit PDF invalid"; exit 1; }
          sudo apt-get update -y >/dev/null || true
          sudo apt-get install -y postgresql-client >/dev/null || true
          export PGSSLMODE=require
          for t in 0 2 4 6 8; do
            sleep "$t"
            COUNT=$(psql "$DB_URL_CLEAN" -Atc "select count(*) from public.label_audit where order_id='${ORDER}'")
            echo "label_audit rows for ${ORDER}: $COUNT"
            [ "${COUNT:-0}" -ge 1 ] && exit 0
          done
          echo "Audit row not found for ${ORDER}"; exit 1

      - name: Routing integrity (no null tiles)
        if: steps.dbnorm.outputs.no_db != '1'
        run: |
          set -euo pipefail
          sudo apt-get update -y >/dev/null || true
          sudo apt-get install -y postgresql-client >/dev/null || true
          export PGSSLMODE=require PGCONNECT_TIMEOUT=10
          psql "$DB_URL_CLEAN" -v ON_ERROR_STOP=1 -Atc "select 1;" >/dev/null
          COUNT=$(psql "$DB_URL_CLEAN" -v ON_ERROR_STOP=1 -Atc "select count(*) from postcode_routing_codes where tile_left is null or tile_right is null;")
          echo "Null tile rows: $COUNT"
          [ "$COUNT" -eq 0 ] || { echo "Routing holes exist. Import mappings before deploy."; exit 1; }

      - name: Upload smoke artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: |
            a6.headers
            a6.bin
            a4.headers
            a4.bin
            audit.headers
            audit.bin
          if-no-files-found: ignore








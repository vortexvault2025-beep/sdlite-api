# .github/workflows/deploy-api.yml
# SD-Lite API — Deploy + PDF smokes + Audit verify + Routing gate
# Per-release deploy to avoid EACCES on node_modules; render warm-up; DB URL normalize.

name: Deploy API

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: api-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # --- Checkout & build ---
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Build (non-blocking)
        run: npm run build || true

      # --- Sanity: ensure inputs (no values printed) ---
      - name: Debug inputs (no secrets printed)
        run: |
          test -n "${{ secrets.VPS_HOST }}" && echo "VPS_HOST=OK" || echo "VPS_HOST=MISSING"
          test -n "${{ secrets.VPS_USER }}" && echo "VPS_USER=OK" || echo "VPS_USER=MISSING"
          test -n "${{ secrets.VPS_PATH }}" && echo "VPS_PATH=OK" || echo "VPS_PATH=MISSING"
          if [ -n "${{ secrets.VPS_SSH_KEY }}" ]; then echo "VPS_SSH_KEY=OK"; else echo "VPS_SSH_KEY=MISSING"; fi
          test -n "${{ secrets.PM2_NAME }}" && echo "PM2_NAME=OK" || echo "PM2_NAME=MISSING"
          test -n "${{ secrets.X_API_KEY }}" && echo "X_API_KEY=OK" || echo "X_API_KEY=MISSING"
          if [ -n "${{ vars.API_HOST }}" ] || [ -n "${{ secrets.API_HOST }}" ] || [ -n "${{ secrets.API_BASE_URL }}" ]; then
            echo "API_BASE/HOST present"
          else
            echo "API_BASE/HOST MISSING"; exit 1
          fi
          if [ -n "${{ secrets.SUPABASE_DB_URL }}" ]; then echo "SUPABASE_DB_URL=SET"; else echo "SUPABASE_DB_URL=NOT SET (routing gate will auto-skip)"; fi

      # --- Resolve public API base (prefers visible repo var) ---
      - name: Resolve API base URL (vars → secrets → base_url)
        run: |
          if [ -n "${{ vars.API_HOST }}" ]; then
            echo "URL_BASE=https://${{ vars.API_HOST }}" >> "$GITHUB_ENV"
            echo "Resolved via vars.API_HOST"
          elif [ -n "${{ secrets.API_HOST }}" ]; then
            echo "URL_BASE=https://${{ secrets.API_HOST }}" >> "$GITHUB_ENV"
            echo "Resolved via secrets.API_HOST (masked)"
          elif [ -n "${{ secrets.API_BASE_URL }}" ]; then
            echo "URL_BASE=${{ secrets.API_BASE_URL }}" >> "$GITHUB_ENV"
            echo "Resolved via secrets.API_BASE_URL (masked)"
          else
            echo "No API host/base configured"; exit 1
          fi

      # --- Prepare release dir on VPS (idempotent) ---
      - name: Prepare release dir on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key:      ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          envs: GITHUB_SHA
          script: |
            set -euo pipefail
            BASE="${{ secrets.VPS_PATH }}"
            RELS="${BASE}/releases"
            REL="${RELS}/${GITHUB_SHA}"
            mkdir -p "$RELS" "$REL"
            ( cd "$REL" && touch .ci_w && rm .ci_w ) || {
              echo "ERR: ${USER} cannot write to $REL"
              echo "One-time fix on VPS: sudo chown -R ${USER}:${USER} ${BASE}"
              exit 1
            }

      # --- Upload to per-release path ---
      - name: Upload to VPS (per-release)
        uses: easingthemes/ssh-deploy@v5.1.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
          REMOTE_HOST:     ${{ secrets.VPS_HOST }}
          REMOTE_USER:     ${{ secrets.VPS_USER }}
          TARGET:          ${{ secrets.VPS_PATH }}/releases/${{ github.sha }}/
          ARGS: "-az --delete"
          EXCLUDE: ".git,.github,node_modules,*.log"

      # --- Install prod deps in the new release and switch symlink ---
      - name: Install prod deps & switch symlink
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key:      ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          envs: GITHUB_SHA
          script: |
            set -euo pipefail
            BASE="${{ secrets.VPS_PATH }}"
            RELS="${BASE}/releases"
            REL="${RELS}/${GITHUB_SHA}"
            CUR="${BASE}/current"
            cd "$REL"
            NODE_ENV=production npm ci --omit=dev --no-audit --no-fund
            ln -sfn "$REL" "$CUR"
            cd "$CUR"
            sudo pm2 restart "${{ secrets.PM2_NAME }}" --update-env || \
            sudo pm2 start "node src/server.js" --name "${{ secrets.PM2_NAME }}"
            sudo pm2 save || true
            # keep last 5 releases (FIX: /dev/null, not /null)
            ls -1dt "${RELS}/"* 2>/dev/null | tail -n +6 | xargs -r rm -rf

      # --- Warm-up poll (hit render once; avoid post-restart 502) ---
      - name: Warm-up poll (hit render once)
        run: |
          set -euo pipefail
          URL="$URL_BASE/api/labels/render-a6?save=0"
          BODY='{"variant":"a6_trk24_nosig_v1","orderId":"WARMUP","recipient":{"lines":["A","B","C","SW1A 1AA"]}}'
          echo "→ Warm-up POST $URL (max 20s)"
          for i in {1..5}; do
            code=$(curl -s -o /tmp/warmup.bin -w "%{http_code}" -X POST "$URL" \
              -H "X-Api-Key: ${{ secrets.X_API_KEY }}" \
              -H "Content-Type: application/json" \
              --data-binary "$BODY" || true)
            if [ "$code" = "200" ] && head -c 5 /tmp/warmup.bin | grep -q "%PDF-"; then
              echo "Warm-up OK"
              exit 0
            fi
            sleep 4
          done
          echo "Warm-up did not produce PDF; continuing (smokes have retries)."

      # --- PDF smokes (strict) ---
      - name: Smoke A6 (strict PDF checks, retry x5)
        run: |
          set -euo pipefail
          URL="$URL_BASE/api/labels/render-a6?save=0"
          echo "→ POST $URL"
          for i in 1 2 3 4 5; do
            curl -sS -X POST "$URL" \
              -H "X-Api-Key: ${{ secrets.X_API_KEY }}" \
              -H "Content-Type: application/json" \
              --data-binary '{"variant":"a6_trk24_nosig_v1","orderId":"CI-A6","recipient":{"lines":["A","B","C","SW1A 1AA"]}}' \
              -D a6.headers -o a6.bin -w "\nHTTP=%{http_code}\n" && break || sleep 4
          done
          grep -qE '^HTTP/2 200|^HTTP/1\.1 200' a6.headers || (echo "A6: non-200"; sed -n '1,120p' a6.headers; exit 1)
          grep -qi '^content-type: *application/pdf' a6.headers || (echo "A6: wrong Content-Type"; sed -n '1,120p' a6.headers; exit 1)
          grep -qi '^content-disposition: *attachment; *filename="RM-ORD-' a6.headers || (echo "A6: wrong Content-Disposition"; sed -n '1,120p' a6.headers; exit 1)
          head -c 5 a6.bin | grep -q "%PDF-" || (echo "A6: not real PDF"; head -c 64 a6.bin | hexdump -C; exit 1)
          echo "A6 OK"

      - name: Smoke A4 4-up (strict PDF checks, retry x5)
        run: |
          set -euo pipefail
          URL="$URL_BASE/api/labels/render-a4-4up?count=1&save=0"
          echo "→ POST $URL"
          for i in 1 2 3 4 5; do
            curl -sS -X POST "$URL" \
              -H "X-Api-Key: ${{ secrets.X_API_KEY }}" \
              -H "Content-Type: application/json" \
              --data-binary '{"variant":"a6_trk24_nosig_v1","orderId":"CI-A4","recipient":{"lines":["A","B","C","SW1A 1AA"]}}' \
              -D a4.headers -o a4.bin -w "\nHTTP=%{http_code}\n" && break || sleep 4
          done
          grep -qE '^HTTP/2 200|^HTTP/1\.1 200' a4.headers || (echo "A4: non-200"; sed -n '1,120p' a4.headers; exit 1)
          grep -qi '^content-type: *application/pdf' a4.headers || (echo "A4: wrong Content-Type"; sed -n '1,120p' a4.headers; exit 1)
          grep -qi '^content-disposition: *attachment; *filename="RM-ORD-' a4.headers || (echo "A4: wrong Content-Disposition"; sed -n '1,120p' a4.headers; exit 1)
          head -c 5 a4.bin | grep -q "%PDF-" || (echo "A4: not real PDF"; head -c 64 a4.bin | hexdump -C; exit 1)
          echo "A4 OK"

      # --- Validate & normalize DB URL (warn only) ---
      - name: Validate & normalize SUPABASE_DB_URL (no leaks)
        id: dbnorm
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.SUPABASE_DB_URL }}" ]; then
            echo "no_db=1" >> "$GITHUB_OUTPUT"
            echo "Skipping DB checks: SUPABASE_DB_URL not set."
            exit 0
          fi
          RAW="${{ secrets.SUPABASE_DB_URL }}"
          RAW=$(echo "$RAW" | tr -d '\r' | sed -E 's/^["'\'' ]+//; s/["'\'' ]+$//')
          CREDS_HOST=$(echo "$RAW" | awk -F'://' '{print $2}')
          CREDS=$(echo "$CREDS_HOST" | awk -F'@' '{print $1}')
          HOSTPORTPATHQS=$(echo "$CREDS_HOST" | awk -F'@' '{print $2}')
          USER=$(echo "$CREDS" | awk -F':' '{print $1}')
          HOST=$(echo "$HOSTPORTPATHQS" | awk -F'[:/]' '{print $1}')
          PORT=$(echo "$HOSTPORTPATHQS" | awk -F'[:/]' '{print $2}')
          PORT=${PORT:-5432}
          echo "DB host (masked): $HOST"
          echo "DB port: $PORT"
          if [ "$PORT" != "5432" ]; then
            echo "::warning title=DB Port::Expected port 5432 for CI; detected $PORT"
          fi
          case "$HOST" in
            *pooler.supabase.com) echo "Pooler host detected (IPv4-friendly).";;
            db.*.supabase.co)    echo "Direct host detected.";               ;;
            *)                    echo "::warning title=DB Host::Unknown host $HOST";;
          esac
          CLEAN=$(echo "$RAW" | awk -F'\\?' '{print $1}')
          echo "db_url_clean=$CLEAN" >> "$GITHUB_OUTPUT"
          echo "DB_URL_CLEAN=$CLEAN"  >> "$GITHUB_ENV"

      # --- Audit verify (save=1 must produce PDF and insert a row) ---
      - name: Audit verify (save=1 + DB row exists)
        if: steps.dbnorm.outputs.no_db != '1'
        run: |
          set -euo pipefail
          ORDER="CI-AUDIT-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          URL="$URL_BASE/api/labels/render-a6?save=1"
          echo "→ Render save=1 (orderId=$ORDER)"
          curl -sS -X POST "$URL" \
            -H "X-Api-Key: ${{ secrets.X_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data-binary "{\"variant\":\"a6_trk24_nosig_v1\",\"orderId\":\"$ORDER\",\"recipient\":{\"lines\":[\"A\",\"B\",\"C\",\"SW1A 1AA\"]}}" \
            -D audit.headers -o audit.bin -w "\nHTTP=%{http_code}\n"

          head -c 5 audit.bin | grep -q "%PDF-" || (echo "Audit PDF invalid"; exit 1)

          export PGSSLMODE=require
          for t in 0 2 4 6 8; do
            sleep "$t"
            COUNT=$(psql "$DB_URL_CLEAN" -Atc "select count(*) from public.label_audit where order_id='${ORDER}'")
            echo "label_audit rows for ${ORDER}: $COUNT"
            [ "${COUNT:-0}" -ge 1 ] && exit 0
          done
          echo "Audit row not found for ${ORDER}"
          exit 1

      # --- Routing integrity gate (no PGHOSTADDR; force TLS via env) ---
      - name: Routing integrity (no null tiles)
        if: steps.dbnorm.outputs.no_db != '1'
        run: |
          set -euo pipefail
          echo "Checking routing integrity..."
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y postgresql-client >/dev/null
          export PGSSLMODE=require
          export PGCONNECT_TIMEOUT=10
          if ! psql "$DB_URL_CLEAN" -v ON_ERROR_STOP=1 -Atc "select 1;" >/dev/null 2>psql.err; then
            echo "❌ Could not connect to Supabase (stderr follows):"
            sed -n '1,200p' psql.err || true
            exit 2
          fi
          echo "Connectivity OK."
          COUNT=$(psql "$DB_URL_CLEAN" -v ON_ERROR_STOP=1 -Atc \
            "select count(*) from postcode_routing_codes where tile_left is null or tile_right is null;")
          echo "Null tile rows: $COUNT"
          [ "$COUNT" -eq 0 ] || (echo "Routing holes exist. Import mappings before deploy."; exit 1)

      # --- Preserve artifacts on failure for debugging ---
      - name: Upload smoke artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          path: |
            a6.headers
            a6.bin
            a4.headers
            a4.bin
            audit.headers
            audit.bin
          if-no-files-found: ignore





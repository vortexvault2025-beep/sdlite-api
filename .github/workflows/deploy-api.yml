# SD-Lite API — Deploy + PDF smokes + Routing gate
# Hardened: single user-owned PM2, passwordless sudo (limited cmds), safe PORT detection.

name: Deploy API

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: api-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # --- Checkout & build ---
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Build (non-blocking)
        run: npm run build || true

      # --- Sanity: ensure inputs (no values printed) ---
      - name: Debug inputs (no secrets printed)
        run: |
          test -n "${{ secrets.VPS_HOST }}" && echo "VPS_HOST=OK" || echo "VPS_HOST=MISSING"
          test -n "${{ secrets.VPS_USER }}" && echo "VPS_USER=OK" || echo "VPS_USER=MISSING"
          test -n "${{ secrets.VPS_PATH }}" && echo "VPS_PATH=OK" || echo "VPS_PATH=MISSING"
          if [ -n "${{ secrets.VPS_SSH_KEY }}" ]; then echo "VPS_SSH_KEY=OK"; else echo "VPS_SSH_KEY=MISSING"; fi
          test -n "${{ secrets.PM2_NAME }}" && echo "PM2_NAME=OK" || echo "PM2_NAME=MISSING"
          test -n "${{ secrets.X_API_KEY }}" && echo "X_API_KEY=OK" || echo "X_API_KEY=MISSING"
          if [ -n "${{ vars.API_HOST }}" ] || [ -n "${{ secrets.API_HOST }}" ] || [ -n "${{ secrets.API_BASE_URL }}" ]; then
            echo "API_BASE/HOST present"
          else
            echo "API_BASE/HOST MISSING"; exit 1
          fi
          if [ -n "${{ secrets.SUPABASE_DB_URL }}" ]; then echo "SUPABASE_DB_URL=SET"; else echo "SUPABASE_DB_URL=NOT SET (routing gate will auto-skip)"; fi

      # --- Resolve public API base (vars → secrets → base_url) ---
      - name: Resolve API base URL (vars → secrets → base_url)
        run: |
          if [ -n "${{ vars.API_HOST }}" ]; then
            echo "URL_BASE=https://${{ vars.API_HOST }}" >> "$GITHUB_ENV"
            echo "Resolved via vars.API_HOST"
          elif [ -n "${{ secrets.API_HOST }}" ]; then
            echo "URL_BASE=https://${{ secrets.API_HOST }}" >> "$GITHUB_ENV"
            echo "Resolved via secrets.API_HOST (masked)"
          elif [ -n "${{ secrets.API_BASE_URL }}" ]; then
            echo "URL_BASE=${{ secrets.API_BASE_URL }}" >> "$GITHUB_ENV"
            echo "Resolved via secrets.API_BASE_URL (masked)"
          else
            echo "No API host/base configured"; exit 1
          fi

      # --- Ship code to VPS target path ---
      - name: Upload to VPS
        uses: easingthemes/ssh-deploy@v5.1.0
        with:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
          REMOTE_HOST:     ${{ secrets.VPS_HOST }}
          REMOTE_USER:     ${{ secrets.VPS_USER }}
          TARGET:          ${{ secrets.VPS_PATH }}
          ARGS: "-az --delete"
          EXCLUDE: ".git,.github,node_modules,*.log,releases/**"

      # --- Single user-owned PM2 + ownership fix + readiness ---
      - name: Install prod deps & restart pm2 (user PM2) + readiness
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}   # e.g. ubuntu
          key:      ${{ secrets.VPS_SSH_KEY }}
          envs:     GITHUB_SHA
          script: |
            set -euo pipefail
            trap 'ret=$?; echo "::error::SSH script failed on line ${LINENO} (exit=$ret)"; pm2 describe "${{ secrets.PM2_NAME }}" || true; pm2 logs "${{ secrets.PM2_NAME }}" --lines 200 --raw || true; ss -lntp || true; exit $ret' ERR
            set -x

            echo "whoami=$(whoami)"
            cd "${{ secrets.VPS_PATH }}"

            # 0) Ensure passwordless sudo is active (prevents prompts)
            sudo -n /usr/bin/pm2 -v >/dev/null || { echo "::error::NOPASSWD sudo missing for $(whoami)"; exit 98; }

            # 1) Kill any root-owned PM2 and free :3000 (avoid port/daemon fights)
            sudo pm2 delete "${{ secrets.PM2_NAME }}" || true
            sudo pm2 kill || true
            PIDS="$(sudo ss -lntp | awk '/:3000[[:space:]]/ {print $NF}' | sed -E 's/.*pid=([0-9]+).*/\1/')"
            for p in $PIDS; do sudo kill -TERM "$p" || true; done
            sleep 1
            for p in $PIDS; do sudo kill -0 "$p" 2>/dev/null && sudo kill -9 "$p" || true; done

            # 2) Normalize ownership & install clean deps
            sudo chown -R "$(whoami)":"$(whoami)" .
            [ -d node_modules ] && rm -rf node_modules || true
            NODE_ENV=production npm ci --omit=dev --no-audit --no-fund

            # 3) Start user-owned PM2 (dotenv preload)
            pm2 delete "${{ secrets.PM2_NAME }}" || true
            DOTENV_CONFIG_PATH="${PWD}/.env" \
            pm2 start "src/server.js" --name "${{ secrets.PM2_NAME }}" \
              --interpreter node --interpreter-args "-r dotenv/config"
            pm2 save || true
            pm2 ls || true

            # 4) Assert "online"
            pm2 describe "${{ secrets.PM2_NAME }}" | grep -Eiq 'status[[:space:]]*│[[:space:]]*online'

            # 5) Resolve PORT safely (no pipefail abort on missing PORT)
            PORT="${PORT:-}"
            if [ -z "$PORT" ] && [ -f "./.env" ]; then
              PORT="$( (grep -E '^PORT=' "./.env" || true) | tail -1 | cut -d= -f2 | tr -d '\r' )"
            fi
            PORT="${PORT:-3000}"
            echo "PORT=$PORT"

            # 6) Readiness (accept 200 or 401)
            echo "Polling http://127.0.0.1:${PORT}/healthz (accept 200 or 401) ..."
            ready=0
            for i in $(seq 1 90); do
              code="$(curl -s -o /dev/null -w '%{http_code}' "http://127.0.0.1:${PORT}/healthz" 2>/dev/null || true)"
              if [ -z "$code" ] || [ "$code" = "000" ]; then
                code="$(wget -qO- --server-response "http://127.0.0.1:${PORT}/healthz" 2>&1 | awk '/^  HTTP/{print $2; exit}' || true)"
              fi
              code="${code:-000}"
              echo "healthz try #$i: HTTP ${code}"
              if [ "$code" = "200" ] || [ "$code" = "401" ]; then ready=1; break; fi
              sleep 1
            done
            if [ "$ready" -ne 1 ]; then
              echo "Not ready; who is listening on :${PORT}?"
              ss -lntp || true
              pm2 describe "${{ secrets.PM2_NAME }}" || true
              pm2 logs "${{ secrets.PM2_NAME }}" --lines 200 --raw || true
              exit 1
            fi

            # 7) Post-deploy info (safe under set -u)
            pm2 ls || true
            echo "Deployed commit: ${GITHUB_SHA:-unknown}"
            echo "PM2 app: ${{ secrets.PM2_NAME }}"

      - name: Warm-up wait
        run: sleep 2

      # --- Smokes: assert REAL PDFs (status + headers + magic) ---
      - name: Smoke A6 (strict PDF checks, retry x3)
        run: |
          set -euo pipefail
          URL="$URL_BASE/api/labels/render-a6?save=0"
          echo "→ POST $URL"
          for i in 1 2 3; do
            curl -sS -X POST "$URL" \
              -H "X-Api-Key: ${{ secrets.X_API_KEY }}" \
              -H "Content-Type: application/json" \
              --data-binary '{"variant":"a6_trk24_nosig_v1","orderId":"CI-A6","recipient":{"lines":["A","B","C","SW1A 1AA"]}}' \
              -D a6.headers -o a6.bin -w "\nHTTP=%{http_code}\n" && break || sleep 1
          done
          grep -qE '^HTTP/2 200|^HTTP/1\.1 200' a6.headers || (echo "A6: non-200"; sed -n '1,120p' a6.headers; exit 1)
          grep -qi '^content-type: *application/pdf' a6.headers || (echo "A6: wrong Content-Type"; sed -n '1,120p' a6.headers; exit 1)
          grep -qi '^content-disposition: *attachment; *filename="RM-ORD-' a6.headers || (echo "A6: wrong Content-Disposition"; sed -n '1,120p' a6.headers; exit 1)
          head -c 5 a6.bin | grep -q "%PDF-" || (echo "A6: not real PDF"; head -c 64 a6.bin | hexdump -C; exit 1)
          echo "A6 OK"

      - name: Smoke A4 4-up (strict PDF checks, retry x3)
        run: |
          set -euo pipefail
          URL="$URL_BASE/api/labels/render-a4-4up?count=1&save=0"
          echo "→ POST $URL"
          for i in 1 2 3; do
            curl -sS -X POST "$URL" \
              -H "X-Api-Key: ${{ secrets.X_API_KEY }}" \
              -H "Content-Type: application/json" \
              --data-binary '{"variant":"a6_trk24_nosig_v1","orderId":"CI-A4","recipient":{"lines":["A","B","C","SW1A 1AA"]}}' \
              -D a4.headers -o a4.bin -w "\nHTTP=%{http_code}\n" && break || sleep 1
          done
          grep -qE '^HTTP/2 200|^HTTP/1\.1 200' a4.headers || (echo "A4: non-200"; sed -n '1,120p' a4.headers; exit 1)
          grep -qi '^content-type: *application/pdf' a4.headers || (echo "A4: wrong Content-Type"; sed -n '1,120p' a4.headers; exit 1)
          grep -qi '^content-disposition: *attachment; *filename="RM-ORD-' a4.headers || (echo "A4: wrong Content-Disposition"; sed -n '1,120p' a4.headers; exit 1)
          head -c 5 a4.bin | grep -q "%PDF-" || (echo "A4: not real PDF"; head -c 64 a4.bin | hexdump -C; exit 1)
          echo "A4 OK"

      # --- Validate & normalize DB URL (warn only) ---
      - name: Validate & normalize SUPABASE_DB_URL (no leaks)
        id: dbnorm
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.SUPABASE_DB_URL








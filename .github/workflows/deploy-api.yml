name: Deploy API (SD-Lite)

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**/*.md"
      - "**/*.png"
      - "**/*.jpg"
      - "**/*.svg"
  workflow_dispatch:

concurrency:
  group: deploy-api-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  NODE_VERSION: "20.x"

jobs:
  deploy:
    name: Deploy to VPS (PM2)
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute release id
        id: rel
        run: |
          echo "sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "ref=${GITHUB_REF}" >> "$GITHUB_OUTPUT"
          date -u +"%Y-%m-%dT%H:%M:%SZ"

      - name: Node setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Upload sources to release dir
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key:      ${{ secrets.VPS_SSH_KEY }}
          source:   "."
          target:   "${{ secrets.VPS_PATH }}/releases/${{ steps.rel.outputs.sha }}"
          rm:       false
          strip_components: 0

      - name: Install prod deps & start (pm2 + dotenv preload) + readiness (diagnostic)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key:      ${{ secrets.VPS_SSH_KEY }}
          envs: GITHUB_SHA
          script: |
            set -euo pipefail
            # Print failing line + PM2/ports on any error
            trap 'ret=$?; echo "::error::SSH script failed on line ${LINENO} (exit=$ret)"; pm2 describe "${{ secrets.PM2_NAME }}" || true; pm2 logs "${{ secrets.PM2_NAME }}" --lines 200 --raw || true; ss -lntp || true; exit $ret' ERR
            set -x

            BASE="${{ secrets.VPS_PATH }}"
            RELS="${BASE}/releases"
            REL="${RELS}/${GITHUB_SHA}"
            CUR="${BASE}/current"

            mkdir -p "$REL"
            cd "$REL"

            NODE_ENV=production npm ci --omit=dev --no-audit --no-fund
            [ -d node_modules/dotenv ] || npm i dotenv@^16 --no-audit --no-fund

            # Link env and switch current -> this release
            [ -f "${BASE}/.env" ] && ln -sfn "${BASE}/.env" "${REL}/.env" || true
            ln -sfn "$REL" "$CUR"

            # Free :3000 if bound
            PIDS="$(ss -lntp | awk '/:3000/ {print $NF}' | sed -E 's/.*pid=([0-9]+).*/\1/')"
            for p in $PIDS; do kill -TERM "$p" || true; sleep 1; kill -0 "$p" 2>/dev/null && kill -9 "$p" || true; done

            cd "$CUR"
            pm2 delete "${{ secrets.PM2_NAME }}" || true
            DOTENV_CONFIG_PATH="${BASE}/.env" \
            pm2 start "src/server.js" --name "${{ secrets.PM2_NAME }}" \
              --interpreter node --interpreter-args "-r dotenv/config"
            pm2 save || true
            pm2 ls || true

            # Assert online (trap prints context if grep fails)
            pm2 describe "${{ secrets.PM2_NAME }}" | grep -Eiq 'status[[:space:]]*â”‚[[:space:]]*online'

            # Resolve PORT (default 3000)
            PORT="${PORT:-}"
            if [ -z "$PORT" ] && [ -f "${BASE}/.env" ]; then
              PORT="$(grep -E '^PORT=' "${BASE}/.env" | tail -1 | cut -d= -f2 | tr -d '\r')"
            fi
            PORT="${PORT:-3000}"
            echo "PORT=$PORT"

            # Readiness: accept 200 or 401
            echo "Polling http://127.0.0.1:${PORT}/healthz (accept 200 or 401) ..."
            ready=0
            for i in $(seq 1 90); do
              code="$(curl -s -o /dev/null -w '%{http_code}' "http://127.0.0.1:${PORT}/healthz" 2>/dev/null || true)"
              if [ -z "$code" ] || [ "$code" = "000" ]; then
                code="$(wget -qO- --server-response "http://127.0.0.1:${PORT}/healthz" 2>&1 | awk '/^  HTTP/{print $2; exit}' || true)"
              fi
              code="${code:-000}"
              echo "healthz try #$i: HTTP ${code}"
              if [ "$code" = "200" ] || [ "$code" = "401" ]; then ready=1; break; fi
              sleep 1
            done

            if [ "$ready" -ne 1 ]; then
              echo "Not ready; who is listening on :${PORT}?"
              ss -lntp || true
              pm2 describe "${{ secrets.PM2_NAME }}" || true
              pm2 logs "${{ secrets.PM2_NAME }}" --lines 200 --raw || true

              PREV="$(readlink -f "$CUR" || true)"
              if [ -n "$PREV" ] && [ -d "$PREV" ] && [ "$PREV" != "$REL" ]; then
                echo "Rollback to $PREV"
                ln -sfn "$PREV" "$CUR"
                cd "$CUR"
                pm2 delete "${{ secrets.PM2_NAME }}" || true
                DOTENV_CONFIG_PATH="${BASE}/.env" \
                pm2 start "src/server.js" --name "${{ secrets.PM2_NAME }}" \
                  --interpreter node --interpreter-args "-r dotenv/config"
                pm2 save || true
              else
                echo "No previous release to roll back to."
              fi
              exit 1
            fi

            # Trim old releases (keep most recent 5)
            ls -1dt "${RELS}/"* 2>/dev/null | tail -n +6 | xargs -r rm -rf

            # Post-deploy info (kept in same SSH step to avoid YAML dedent issues)
            pm2 ls || true
            echo "Deployed commit: ${GITHUB_SHA}"
            echo "PM2 app: ${{ secrets.PM2_NAME }}"






